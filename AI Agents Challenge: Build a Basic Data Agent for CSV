{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOSGCSuRNTtO8hmK0im9/5b",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DivyaaSK01/Akaike/blob/main/AI%20Agents%20Challenge%3A%20Build%20a%20Basic%20Data%20Agent%20for%20CSV\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yseAhve_tLOT",
        "outputId": "95a5f2d4-9ecc-4559-b36f-74a142ac48fa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Folder structure created successfully inside 'csv_data_agent_project/'\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "\n",
        "# Root project folder\n",
        "project_root = \"csv_data_agent_project\"\n",
        "\n",
        "# Subfolders list\n",
        "folders = [\n",
        "    \"data\",\n",
        "    \"agent\",\n",
        "    \"app\",\n",
        "    \"outputs/logs\"\n",
        "]\n",
        "\n",
        "# Create all folders\n",
        "for folder in folders:\n",
        "    path = os.path.join(project_root, folder)\n",
        "    os.makedirs(path, exist_ok=True)\n",
        "\n",
        "# Create empty files (optional)\n",
        "open(os.path.join(project_root, \"README.md\"), \"w\").close()\n",
        "open(os.path.join(project_root, \"agent\", \"basic_data_agent.py\"), \"w\").close()\n",
        "open(os.path.join(project_root, \"app\", \"streamlit_app.py\"), \"w\").close()\n",
        "\n",
        "print(f\"Folder structure created successfully inside '{project_root}/'\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import re\n",
        "from collections import defaultdict\n",
        "\n",
        "class BasicDataAgent:\n",
        "    def __init__(self, csv_paths):\n",
        "        if isinstance(csv_paths, str):\n",
        "            csv_paths = [csv_paths]\n",
        "        self.csv_paths = csv_paths\n",
        "        self.data = []\n",
        "        self.customers = defaultdict(list)\n",
        "        self.products = defaultdict(list)\n",
        "        self._load_all_data()\n",
        "\n",
        "    def _load_all_data(self):\n",
        "        for path in self.csv_paths:\n",
        "            with open(path, mode='r', encoding='utf-8') as file:\n",
        "                reader = csv.DictReader(file)\n",
        "                for row in reader:\n",
        "                    self.data.append(row)\n",
        "                    customer = row.get('Customer Name', '').strip()\n",
        "                    product = row.get('Product Name', '').strip()\n",
        "                    if customer and product:\n",
        "                        self.customers[customer].append(product)\n",
        "                        self.products[product].append(customer)\n",
        "\n",
        "    def answer_query(self, query):\n",
        "        query = query.lower()\n",
        "\n",
        "        if \"top 5 customers\" in query:\n",
        "            return self.top_customers()\n",
        "        elif \"how many customers bought\" in query:\n",
        "            product = self._extract_product_name(query)\n",
        "            return self.how_many_customers_bought(product)\n",
        "        elif \"list all products purchased by\" in query:\n",
        "            customer = self._extract_customer_name(query)\n",
        "            return self.list_products_by_customer(customer)\n",
        "        elif \"who purchased\" in query:\n",
        "            product = self._extract_product_name(query)\n",
        "            return self.who_purchased_product(product)\n",
        "        elif \"total unique products\" in query:\n",
        "            return self.total_unique_products()\n",
        "        else:\n",
        "            return \"‚ùå Sorry, I don't understand that query yet.\"\n",
        "\n",
        "    def top_customers(self):\n",
        "        customer_counts = {c: len(p) for c, p in self.customers.items()}\n",
        "        top = sorted(customer_counts.items(), key=lambda x: x[1], reverse=True)[:5]\n",
        "        return \"\\n\".join(f\"{customer}: {count} purchases\" for customer, count in top)\n",
        "\n",
        "    def how_many_customers_bought(self, product):\n",
        "        buyers = self.products.get(product, [])\n",
        "        return f\"üõçÔ∏è {len(set(buyers))} customers bought {product}.\"\n",
        "\n",
        "    def list_products_by_customer(self, customer):\n",
        "        products = self.customers.get(customer, [])\n",
        "        if not products:\n",
        "            return f\"‚ùå No purchases found for {customer}.\"\n",
        "        return f\"üõí {customer} purchased: {', '.join(set(products))}\"\n",
        "\n",
        "    def who_purchased_product(self, product):\n",
        "        buyers = self.products.get(product, [])\n",
        "        if not buyers:\n",
        "            return f\"‚ùå No one purchased {product}.\"\n",
        "        return f\"üßë‚Äçü§ù‚Äçüßë {product} was purchased by: {', '.join(set(buyers))}\"\n",
        "\n",
        "    def total_unique_products(self):\n",
        "        return f\"üì¶ Total unique products purchased: {len(self.products)}\"\n",
        "\n",
        "    def _extract_product_name(self, query):\n",
        "        match = re.search(r'bought (.+)', query) or re.search(r'purchased (.+)', query)\n",
        "        if match:\n",
        "            return match.group(1).strip().capitalize()\n",
        "        return \"\"\n",
        "\n",
        "    def _extract_customer_name(self, query):\n",
        "        match = re.search(r'by (.+)', query)\n",
        "        if match:\n",
        "            return match.group(1).strip().capitalize()\n",
        "        return \"\"\n"
      ],
      "metadata": {
        "id": "Shfu9iTVytYL"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "mGUb1TeVvm30"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile csv_data_agent_project/agent/basic_data_agent.py"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZeYveDFu1HF3",
        "outputId": "211067a2-cf39-40e4-c831-56a7d6c15959"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting csv_data_agent_project/agent/basic_data_agent.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# agent/basic_data_agent.py\n",
        "\n",
        "import csv\n",
        "import re\n",
        "\n",
        "def load_csv(file_path):\n",
        "    data = []\n",
        "    with open(file_path, newline='', encoding='utf-8') as csvfile:\n",
        "        reader = csv.DictReader(csvfile)\n",
        "        for row in reader:\n",
        "            data.append(row)\n",
        "    return data\n",
        "\n",
        "def detect_query_type(query):\n",
        "    query = query.lower()\n",
        "    if \"top\" in query and \"customers\" in query:\n",
        "        return \"top_customers\"\n",
        "    elif \"how many customers bought\" in query:\n",
        "        return \"count_customers_by_product\"\n",
        "    elif \"products purchased by\" in query:\n",
        "        return \"list_products_by_customer\"\n",
        "    elif \"who purchased\" in query:\n",
        "        return \"customers_by_product\"\n",
        "    elif \"total unique products\" in query:\n",
        "        return \"count_unique_products\"\n",
        "    else:\n",
        "        return \"unknown\"\n",
        "\n",
        "def extract_product_name(query):\n",
        "    match = re.search(r\"bought\\s+(.*)\", query.lower())\n",
        "    if match:\n",
        "        return match.group(1).strip().title()\n",
        "    match = re.search(r\"purchased\\s+(.*)\", query.lower())\n",
        "    if match:\n",
        "        return match.group(1).strip().title()\n",
        "    return \"\"\n",
        "\n",
        "def extract_customer_name(query):\n",
        "    match = re.search(r\"purchased by\\s+(.*)\", query.lower())\n",
        "    if match:\n",
        "        return match.group(1).strip().title()\n",
        "    return \"\"\n",
        "\n",
        "def top_customers(data):\n",
        "    customer_count = {}\n",
        "    for entry in data:\n",
        "        customer = entry.get('Customer Name') or entry.get('customer_name')\n",
        "        if customer:\n",
        "            customer_count[customer] = customer_count.get(customer, 0) + 1\n",
        "    sorted_customers = sorted(customer_count.items(), key=lambda x: x[1], reverse=True)\n",
        "    return sorted_customers[:5]\n",
        "\n",
        "def count_customers_by_product(data, product_name):\n",
        "    customers = set()\n",
        "    for entry in data:\n",
        "        if entry.get('Product') and product_name.lower() in entry['Product'].lower():\n",
        "            customers.add(entry.get('Customer Name') or entry.get('customer_name'))\n",
        "    return len(customers)\n",
        "\n",
        "def list_products_by_customer(data, customer_name):\n",
        "    products = set()\n",
        "    for entry in data:\n",
        "        if (entry.get('Customer Name') or entry.get('customer_name') or \"\").lower() == customer_name.lower():\n",
        "            products.add(entry.get('Product'))\n",
        "    return list(products)\n",
        "\n",
        "def customers_by_product(data, product_name):\n",
        "    customers = set()\n",
        "    for entry in data:\n",
        "        if entry.get('Product') and product_name.lower() in entry['Product'].lower():\n",
        "            customers.add(entry.get('Customer Name') or entry.get('customer_name'))\n",
        "    return list(customers)\n",
        "\n",
        "def count_unique_products(data):\n",
        "    products = set()\n",
        "    for entry in data:\n",
        "        if entry.get('Product'):\n",
        "            products.add(entry['Product'])\n",
        "    return len(products)\n",
        "\n",
        "def agent(query, data):\n",
        "    query_type = detect_query_type(query)\n",
        "\n",
        "    if query_type == \"top_customers\":\n",
        "        return top_customers(data)\n",
        "    elif query_type == \"count_customers_by_product\":\n",
        "        product_name = extract_product_name(query)\n",
        "        return count_customers_by_product(data, product_name)\n",
        "    elif query_type == \"list_products_by_customer\":\n",
        "        customer_name = extract_customer_name(query)\n",
        "        return list_products_by_customer(data, customer_name)\n",
        "    elif query_type == \"customers_by_product\":\n",
        "        product_name = extract_product_name(query)\n",
        "        return customers_by_product(data, product_name)\n",
        "    elif query_type == \"count_unique_products\":\n",
        "        return count_unique_products(data)\n",
        "    else:\n",
        "        return \"Sorry, I don't understand that question.\"\n",
        "\n"
      ],
      "metadata": {
        "id": "cf5AIWui1IyU"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import re\n",
        "from collections import defaultdict\n",
        "\n",
        "class BasicDataAgent:\n",
        "    def __init__(self, csv_paths):\n",
        "        if isinstance(csv_paths, str):\n",
        "            csv_paths = [csv_paths]\n",
        "        self.csv_paths = csv_paths\n",
        "        self.data = []\n",
        "        self.customers = defaultdict(list)\n",
        "        self.products = defaultdict(list)\n",
        "        self._load_all_data()\n",
        "\n",
        "    def _load_all_data(self):\n",
        "        for path in self.csv_paths:\n",
        "            with open(path, mode='r', encoding='utf-8') as file:\n",
        "                reader = csv.DictReader(file)\n",
        "                for row in reader:\n",
        "                    self.data.append(row)\n",
        "                    customer = row.get('Customer Name', '').strip()\n",
        "                    product = row.get('Product Name', '').strip()\n",
        "                    if customer and product:\n",
        "                        self.customers[customer].append(product)\n",
        "                        self.products[product].append(customer)\n",
        "\n",
        "    def answer_query(self, query):\n",
        "        query = query.lower()\n",
        "\n",
        "        if \"top 5 customers\" in query:\n",
        "            return self.top_customers()\n",
        "        elif \"how many customers bought\" in query:\n",
        "            product = self._extract_product_name(query)\n",
        "            return self.how_many_customers_bought(product)\n",
        "        elif \"list all products purchased by\" in query:\n",
        "            customer = self._extract_customer_name(query)\n",
        "            return self.list_products_by_customer(customer)\n",
        "        elif \"who purchased\" in query:\n",
        "            product = self._extract_product_name(query)\n",
        "            return self.who_purchased_product(product)\n",
        "        elif \"total unique products\" in query:\n",
        "            return self.total_unique_products()\n",
        "        else:\n",
        "            return \"‚ùå Sorry, I don't understand that query yet.\"\n",
        "\n",
        "    def top_customers(self):\n",
        "        customer_counts = {c: len(p) for c, p in self.customers.items()}\n",
        "        top = sorted(customer_counts.items(), key=lambda x: x[1], reverse=True)[:5]\n",
        "        return \"\\n\".join(f\"{customer}: {count} purchases\" for customer, count in top)\n",
        "\n",
        "    def how_many_customers_bought(self, product):\n",
        "        buyers = self.products.get(product, [])\n",
        "        return f\"üõçÔ∏è {len(set(buyers))} customers bought {product}.\"\n",
        "\n",
        "    def list_products_by_customer(self, customer):\n",
        "        products = self.customers.get(customer, [])\n",
        "        if not products:\n",
        "            return f\"‚ùå No purchases found for {customer}.\"\n",
        "        return f\"üõí {customer} purchased: {', '.join(set(products))}\"\n",
        "\n",
        "    def who_purchased_product(self, product):\n",
        "        buyers = self.products.get(product, [])\n",
        "        if not buyers:\n",
        "            return f\"‚ùå No one purchased {product}.\"\n",
        "        return f\"üßë‚Äçü§ù‚Äçüßë {product} was purchased by: {', '.join(set(buyers))}\"\n",
        "\n",
        "    def total_unique_products(self):\n",
        "        return f\"üì¶ Total unique products purchased: {len(self.products)}\"\n",
        "\n",
        "    def _extract_product_name(self, query):\n",
        "        match = re.search(r'bought (.+)', query) or re.search(r'purchased (.+)', query)\n",
        "        if match:\n",
        "            return match.group(1).strip().capitalize()\n",
        "        return \"\"\n",
        "\n",
        "    def _extract_customer_name(self, query):\n",
        "        match = re.search(r'by (.+)', query)\n",
        "        if match:\n",
        "            return match.group(1).strip().capitalize()\n",
        "        return \"\"\n",
        "\n"
      ],
      "metadata": {
        "id": "eYnCJ49E9JxO"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize the agent with your CSV files\n",
        "agent = BasicDataAgent([\n",
        "    'csv_data_agent_project/data/myntra.csv',\n",
        "    'csv_data_agent_project/data/dress.csv',\n",
        "    'csv_data_agent_project/data/hr.csv'\n",
        "])\n",
        "\n",
        "# Example Queries to test the agent\n",
        "print(agent.answer_query(\"Top 5 customers with the most purchases\"))\n",
        "print(agent.answer_query(\"How many customers bought Shirt\"))\n",
        "print(agent.answer_query(\"List all products purchased by John Doe\"))\n",
        "print(agent.answer_query(\"Who purchased Jeans\"))\n",
        "print(agent.answer_query(\"Total unique products purchased\"))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f8rTx1139J98",
        "outputId": "7b3e92d1-e723-4ea3-f179-67c9c286e1e4"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "üõçÔ∏è 0 customers bought Shirt.\n",
            "‚ùå No purchases found for John doe.\n",
            "‚ùå No one purchased Jeans.\n",
            "üì¶ Total unique products purchased: 0\n"
          ]
        }
      ]
    }
  ]
}